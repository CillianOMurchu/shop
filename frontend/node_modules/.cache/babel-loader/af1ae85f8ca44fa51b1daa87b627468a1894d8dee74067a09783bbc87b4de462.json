{"ast":null,"code":"var _jsxFileName = \"/home/cillianomurchu/projects/store/frontend/src/components/EntityForm.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectSchemaByName } from '../store/slices/schemasSlice';\nimport { selectAllEntitiesByType } from '../store/slices/entitiesSlice';\nimport { createEntity, updateEntity, setRelationship } from '../store/slices/entitiesSlice';\nimport ImageUpload from './ImageUpload';\nimport { imageService } from '../services/imageService';\nimport { apiService } from '../services/apiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EntityForm = ({\n  entityType,\n  entity,\n  onClose\n}) => {\n  _s2();\n  const dispatch = useDispatch();\n  const schema = useSelector(state => selectSchemaByName(state, entityType));\n  const [formData, setFormData] = useState({});\n  const [relationships, setRelationships] = useState({});\n  useEffect(() => {\n    console.log('EntityForm useEffect triggered', {\n      entity,\n      schema\n    }); // Debug log\n    if (entity) {\n      console.log('Setting form data from entity:', entity); // Debug log\n      setFormData(entity);\n      // TODO: Load existing relationships - temporarily disabled to fix input issue\n    } else {\n      // Initialize with default values\n      const initialData = {};\n      schema === null || schema === void 0 ? void 0 : schema.fields.forEach(field => {\n        if (field.default !== undefined) {\n          initialData[field.name] = field.default;\n        }\n      });\n      console.log('Setting initial form data:', initialData); // Debug log\n      setFormData(initialData);\n    }\n    setRelationships({}); // Reset relationships for now\n  }, [entity, schema]);\n  const handleFieldChange = (fieldName, value) => {\n    console.log('Field change:', fieldName, value); // Debug log\n    setFormData(prev => ({\n      ...prev,\n      [fieldName]: value\n    }));\n  };\n  const handleRelationshipChange = (relationshipName, targetType, selectedIds) => {\n    setRelationships(prev => ({\n      ...prev,\n      [relationshipName]: {\n        targetType,\n        selectedIds\n      }\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Process images before saving\n    const processedFormData = {\n      ...formData\n    };\n\n    // Process single images\n    for (const [fieldName, value] of Object.entries(formData)) {\n      if (value && typeof value === 'object' && value.dataUrl) {\n        try {\n          processedFormData[fieldName] = await imageService.processImageForStorage(value);\n        } catch (error) {\n          console.error('Failed to process image:', error);\n        }\n      }\n\n      // Process image galleries\n      if (Array.isArray(value) && value.length > 0 && value[0].dataUrl) {\n        try {\n          const processedImages = await Promise.all(value.map(img => imageService.processImageForStorage(img)));\n          processedFormData[fieldName] = processedImages;\n        } catch (error) {\n          console.error('Failed to process gallery images:', error);\n        }\n      }\n    }\n    try {\n      let apiResponse;\n      let entityId;\n      let entityResult;\n      if (entity) {\n        // Update existing entity\n        entityId = entity.id;\n        try {\n          apiResponse = await apiService.updateEntity(entityType, entity.id, processedFormData);\n        } catch (error) {\n          console.warn('Backend not available, updating locally:', error.message);\n        }\n\n        // Update Redux state\n        dispatch(updateEntity({\n          entityType,\n          entityId: entity.id,\n          entityData: processedFormData\n        }));\n      } else {\n        // Create new entity - first create in Redux to get the ID\n        entityResult = dispatch(createEntity({\n          entityType,\n          entityData: processedFormData\n        }));\n        entityId = entityResult.payload.id;\n\n        // Try to sync with backend if available\n        try {\n          apiResponse = await apiService.createEntity(entityType, processedFormData);\n          console.log('Entity synced with backend:', apiResponse);\n        } catch (error) {\n          console.warn('Backend not available, entity created locally only:', error.message);\n        }\n      }\n\n      // Handle relationships with the correct entity ID (only if we have relationships to process)\n      if (Object.keys(relationships).length > 0 && entityId) {\n        console.log('Processing relationships:', relationships, 'for entity:', entityId);\n        for (const [relationshipName, {\n          targetType,\n          selectedIds\n        }] of Object.entries(relationships)) {\n          for (const targetId of selectedIds) {\n            try {\n              // Try to save relationship to backend\n              console.log(`Attempting to create relationship: ${entityType}[${entityId}] -> ${relationshipName} -> ${targetType}[${targetId}]`);\n              await apiService.addRelationship(entityType, entityId, relationshipName, targetType, targetId);\n              console.log('Relationship synced with backend');\n            } catch (error) {\n              console.warn('Backend not available for relationships, saving locally only:', error.message);\n            }\n\n            // Always update Redux state regardless of backend availability\n            dispatch(setRelationship({\n              fromType: entityType,\n              fromId: entityId,\n              toType: targetType,\n              toId: targetId,\n              relationshipType: relationshipName\n            }));\n            console.log('Relationship saved to Redux store');\n          }\n        }\n      } else if (Object.keys(relationships).length > 0) {\n        console.error('Cannot create relationships: entityId is missing', {\n          entityId,\n          relationships\n        });\n      }\n      onClose();\n    } catch (error) {\n      console.error('Failed to save entity:', error);\n      alert('Failed to save entity. Please try again.');\n    }\n  };\n  const renderField = field => {\n    const value = formData[field.name] || '';\n    switch (field.type) {\n      case 'string':\n        return /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: value,\n          onChange: e => handleFieldChange(field.name, e.target.value),\n          required: field.required\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this);\n      case 'text':\n        return /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: value,\n          onChange: e => handleFieldChange(field.name, e.target.value),\n          required: field.required,\n          rows: 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this);\n      case 'number':\n        return /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: value,\n          onChange: e => handleFieldChange(field.name, parseFloat(e.target.value)),\n          required: field.required\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this);\n      case 'boolean':\n        return /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: value,\n          onChange: e => handleFieldChange(field.name, e.target.checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this);\n      case 'image':\n        return /*#__PURE__*/_jsxDEV(ImageUpload, {\n          value: value,\n          onChange: imageData => handleFieldChange(field.name, imageData),\n          multiple: false,\n          label: `Upload ${field.label}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this);\n      case 'image_gallery':\n        return /*#__PURE__*/_jsxDEV(ImageUpload, {\n          value: value || [],\n          onChange: imageArray => handleFieldChange(field.name, imageArray),\n          multiple: true,\n          label: `Upload ${field.label}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: value,\n          onChange: e => handleFieldChange(field.name, e.target.value),\n          required: field.required\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this);\n    }\n  };\n  const renderRelationshipField = relationship => {\n    var _s = $RefreshSig$();\n    const RelationshipSelector = ({\n      relationship\n    }) => {\n      _s();\n      var _relationships$relati, _relationships$relati2;\n      const availableEntities = useSelector(state => selectAllEntitiesByType(state, relationship.target));\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"relationship-field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: relationship.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this), relationship.type === 'belongsTo' ? /*#__PURE__*/_jsxDEV(\"select\", {\n          value: ((_relationships$relati = relationships[relationship.name]) === null || _relationships$relati === void 0 ? void 0 : (_relationships$relati2 = _relationships$relati.selectedIds) === null || _relationships$relati2 === void 0 ? void 0 : _relationships$relati2[0]) || '',\n          onChange: e => handleRelationshipChange(relationship.name, relationship.target, e.target.value ? [e.target.value] : []),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: [\"Select \", relationship.label]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 15\n          }, this), availableEntities.map(entity => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: entity.id,\n            children: entity.name || entity.title || `${relationship.target} #${entity.id.slice(0, 8)}`\n          }, entity.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"multi-select\",\n          children: availableEntities.map(entity => {\n            var _relationships$relati3, _relationships$relati4;\n            return /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"checkbox-label\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: ((_relationships$relati3 = relationships[relationship.name]) === null || _relationships$relati3 === void 0 ? void 0 : (_relationships$relati4 = _relationships$relati3.selectedIds) === null || _relationships$relati4 === void 0 ? void 0 : _relationships$relati4.includes(entity.id)) || false,\n                onChange: e => {\n                  var _relationships$relati5;\n                  const currentIds = ((_relationships$relati5 = relationships[relationship.name]) === null || _relationships$relati5 === void 0 ? void 0 : _relationships$relati5.selectedIds) || [];\n                  const newIds = e.target.checked ? [...currentIds, entity.id] : currentIds.filter(id => id !== entity.id);\n                  handleRelationshipChange(relationship.name, relationship.target, newIds);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 19\n              }, this), entity.name || entity.title || `${relationship.target} #${entity.id.slice(0, 8)}`]\n            }, entity.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this);\n    };\n    _s(RelationshipSelector, \"axXf9O0oaBsz9wNgciNgFa7O0GM=\", false, function () {\n      return [useSelector];\n    });\n    return /*#__PURE__*/_jsxDEV(RelationshipSelector, {\n      relationship: relationship\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 12\n    }, this);\n  };\n  if (!schema) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Schema not found for \", entityType]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"entity-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [entity ? 'Edit' : 'Create', \" \", schema.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-btn\",\n        onClick: onClose,\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-fields\",\n        children: schema.fields.map(field => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: field.name,\n            children: [field.label, \" \", field.required && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"required\",\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 50\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 15\n          }, this), renderField(field)]\n        }, field.name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this), schema.relationships && schema.relationships.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-relationships\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Relationships\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }, this), schema.relationships.map(relationship => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: renderRelationshipField(relationship)\n        }, relationship.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn-secondary\",\n          onClick: onClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn-primary\",\n          children: [entity ? 'Update' : 'Create', \" \", schema.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 5\n  }, this);\n};\n_s2(EntityForm, \"gmusxiAgnyFbKs3cfL8fqdLIN+Y=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = EntityForm;\nexport default EntityForm;\nvar _c;\n$RefreshReg$(_c, \"EntityForm\");","map":{"version":3,"names":["React","useState","useEffect","useSelector","useDispatch","selectSchemaByName","selectAllEntitiesByType","createEntity","updateEntity","setRelationship","ImageUpload","imageService","apiService","jsxDEV","_jsxDEV","EntityForm","entityType","entity","onClose","_s2","dispatch","schema","state","formData","setFormData","relationships","setRelationships","console","log","initialData","fields","forEach","field","default","undefined","name","handleFieldChange","fieldName","value","prev","handleRelationshipChange","relationshipName","targetType","selectedIds","handleSubmit","e","preventDefault","processedFormData","Object","entries","dataUrl","processImageForStorage","error","Array","isArray","length","processedImages","Promise","all","map","img","apiResponse","entityId","entityResult","id","warn","message","entityData","payload","keys","targetId","addRelationship","fromType","fromId","toType","toId","relationshipType","alert","renderField","type","onChange","target","required","fileName","_jsxFileName","lineNumber","columnNumber","rows","parseFloat","checked","imageData","multiple","label","imageArray","renderRelationshipField","relationship","_s","$RefreshSig$","RelationshipSelector","_relationships$relati","_relationships$relati2","availableEntities","className","children","title","slice","_relationships$relati3","_relationships$relati4","includes","_relationships$relati5","currentIds","newIds","filter","onClick","onSubmit","htmlFor","_c","$RefreshReg$"],"sources":["/home/cillianomurchu/projects/store/frontend/src/components/EntityForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectSchemaByName } from '../store/slices/schemasSlice';\nimport { selectAllEntitiesByType } from '../store/slices/entitiesSlice';\nimport { createEntity, updateEntity, setRelationship } from '../store/slices/entitiesSlice';\nimport ImageUpload from './ImageUpload';\nimport { imageService } from '../services/imageService';\nimport { apiService } from '../services/apiService';\n\nconst EntityForm = ({ entityType, entity, onClose }) => {\n  const dispatch = useDispatch();\n  const schema = useSelector(state => selectSchemaByName(state, entityType));\n  \n  const [formData, setFormData] = useState({});\n  const [relationships, setRelationships] = useState({});\n\n  useEffect(() => {\n    console.log('EntityForm useEffect triggered', { entity, schema }); // Debug log\n    if (entity) {\n      console.log('Setting form data from entity:', entity); // Debug log\n      setFormData(entity);\n      // TODO: Load existing relationships - temporarily disabled to fix input issue\n    } else {\n      // Initialize with default values\n      const initialData = {};\n      schema?.fields.forEach(field => {\n        if (field.default !== undefined) {\n          initialData[field.name] = field.default;\n        }\n      });\n      console.log('Setting initial form data:', initialData); // Debug log\n      setFormData(initialData);\n    }\n    setRelationships({}); // Reset relationships for now\n  }, [entity, schema]);\n\n  const handleFieldChange = (fieldName, value) => {\n    console.log('Field change:', fieldName, value); // Debug log\n    setFormData(prev => ({\n      ...prev,\n      [fieldName]: value\n    }));\n  };\n\n  const handleRelationshipChange = (relationshipName, targetType, selectedIds) => {\n    setRelationships(prev => ({\n      ...prev,\n      [relationshipName]: { targetType, selectedIds }\n    }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    // Process images before saving\n    const processedFormData = { ...formData };\n    \n    // Process single images\n    for (const [fieldName, value] of Object.entries(formData)) {\n      if (value && typeof value === 'object' && value.dataUrl) {\n        try {\n          processedFormData[fieldName] = await imageService.processImageForStorage(value);\n        } catch (error) {\n          console.error('Failed to process image:', error);\n        }\n      }\n      \n      // Process image galleries\n      if (Array.isArray(value) && value.length > 0 && value[0].dataUrl) {\n        try {\n          const processedImages = await Promise.all(\n            value.map(img => imageService.processImageForStorage(img))\n          );\n          processedFormData[fieldName] = processedImages;\n        } catch (error) {\n          console.error('Failed to process gallery images:', error);\n        }\n      }\n    }\n    \n    try {\n      let apiResponse;\n      let entityId;\n      let entityResult;\n      \n      if (entity) {\n        // Update existing entity\n        entityId = entity.id;\n        try {\n          apiResponse = await apiService.updateEntity(entityType, entity.id, processedFormData);\n        } catch (error) {\n          console.warn('Backend not available, updating locally:', error.message);\n        }\n        \n        // Update Redux state\n        dispatch(updateEntity({ \n          entityType, \n          entityId: entity.id, \n          entityData: processedFormData \n        }));\n      } else {\n        // Create new entity - first create in Redux to get the ID\n        entityResult = dispatch(createEntity({ \n          entityType, \n          entityData: processedFormData \n        }));\n        entityId = entityResult.payload.id;\n        \n        // Try to sync with backend if available\n        try {\n          apiResponse = await apiService.createEntity(entityType, processedFormData);\n          console.log('Entity synced with backend:', apiResponse);\n        } catch (error) {\n          console.warn('Backend not available, entity created locally only:', error.message);\n        }\n      }\n\n      // Handle relationships with the correct entity ID (only if we have relationships to process)\n      if (Object.keys(relationships).length > 0 && entityId) {\n        console.log('Processing relationships:', relationships, 'for entity:', entityId);\n        for (const [relationshipName, { targetType, selectedIds }] of Object.entries(relationships)) {\n          for (const targetId of selectedIds) {\n            try {\n              // Try to save relationship to backend\n              console.log(`Attempting to create relationship: ${entityType}[${entityId}] -> ${relationshipName} -> ${targetType}[${targetId}]`);\n              await apiService.addRelationship(entityType, entityId, relationshipName, targetType, targetId);\n              console.log('Relationship synced with backend');\n            } catch (error) {\n              console.warn('Backend not available for relationships, saving locally only:', error.message);\n            }\n            \n            // Always update Redux state regardless of backend availability\n            dispatch(setRelationship({\n              fromType: entityType,\n              fromId: entityId,\n              toType: targetType,\n              toId: targetId,\n              relationshipType: relationshipName\n            }));\n            console.log('Relationship saved to Redux store');\n          }\n        }\n      } else if (Object.keys(relationships).length > 0) {\n        console.error('Cannot create relationships: entityId is missing', { entityId, relationships });\n      }\n\n      onClose();\n    } catch (error) {\n      console.error('Failed to save entity:', error);\n      alert('Failed to save entity. Please try again.');\n    }\n  };\n\n  const renderField = (field) => {\n    const value = formData[field.name] || '';\n\n    switch (field.type) {\n      case 'string':\n        return (\n          <input\n            type=\"text\"\n            value={value}\n            onChange={(e) => handleFieldChange(field.name, e.target.value)}\n            required={field.required}\n          />\n        );\n      \n      case 'text':\n        return (\n          <textarea\n            value={value}\n            onChange={(e) => handleFieldChange(field.name, e.target.value)}\n            required={field.required}\n            rows={4}\n          />\n        );\n      \n      case 'number':\n        return (\n          <input\n            type=\"number\"\n            value={value}\n            onChange={(e) => handleFieldChange(field.name, parseFloat(e.target.value))}\n            required={field.required}\n          />\n        );\n      \n      case 'boolean':\n        return (\n          <input\n            type=\"checkbox\"\n            checked={value}\n            onChange={(e) => handleFieldChange(field.name, e.target.checked)}\n          />\n        );\n      \n      case 'image':\n        return (\n          <ImageUpload\n            value={value}\n            onChange={(imageData) => handleFieldChange(field.name, imageData)}\n            multiple={false}\n            label={`Upload ${field.label}`}\n          />\n        );\n      \n      case 'image_gallery':\n        return (\n          <ImageUpload\n            value={value || []}\n            onChange={(imageArray) => handleFieldChange(field.name, imageArray)}\n            multiple={true}\n            label={`Upload ${field.label}`}\n          />\n        );\n      \n      default:\n        return (\n          <input\n            type=\"text\"\n            value={value}\n            onChange={(e) => handleFieldChange(field.name, e.target.value)}\n            required={field.required}\n          />\n        );\n    }\n  };\n\n  const renderRelationshipField = (relationship) => {\n    const RelationshipSelector = ({ relationship }) => {\n      const availableEntities = useSelector(state => \n        selectAllEntitiesByType(state, relationship.target)\n      );\n\n      return (\n        <div className=\"relationship-field\">\n          <label>{relationship.label}</label>\n          {relationship.type === 'belongsTo' ? (\n            <select\n              value={relationships[relationship.name]?.selectedIds?.[0] || ''}\n              onChange={(e) => handleRelationshipChange(\n                relationship.name, \n                relationship.target, \n                e.target.value ? [e.target.value] : []\n              )}\n            >\n              <option value=\"\">Select {relationship.label}</option>\n              {availableEntities.map(entity => (\n                <option key={entity.id} value={entity.id}>\n                  {entity.name || entity.title || `${relationship.target} #${entity.id.slice(0, 8)}`}\n                </option>\n              ))}\n            </select>\n          ) : (\n            <div className=\"multi-select\">\n              {availableEntities.map(entity => (\n                <label key={entity.id} className=\"checkbox-label\">\n                  <input\n                    type=\"checkbox\"\n                    checked={relationships[relationship.name]?.selectedIds?.includes(entity.id) || false}\n                    onChange={(e) => {\n                      const currentIds = relationships[relationship.name]?.selectedIds || [];\n                      const newIds = e.target.checked \n                        ? [...currentIds, entity.id]\n                        : currentIds.filter(id => id !== entity.id);\n                      \n                      handleRelationshipChange(relationship.name, relationship.target, newIds);\n                    }}\n                  />\n                  {entity.name || entity.title || `${relationship.target} #${entity.id.slice(0, 8)}`}\n                </label>\n              ))}\n            </div>\n          )}\n        </div>\n      );\n    };\n\n    return <RelationshipSelector relationship={relationship} />;\n  };\n\n  if (!schema) {\n    return <div>Schema not found for {entityType}</div>;\n  }\n\n  return (\n    <div className=\"entity-form\">\n      <div className=\"form-header\">\n        <h2>{entity ? 'Edit' : 'Create'} {schema.name}</h2>\n        <button className=\"close-btn\" onClick={onClose}>×</button>\n      </div>\n      \n      <form onSubmit={handleSubmit}>\n        <div className=\"form-fields\">\n          {schema.fields.map(field => (\n            <div key={field.name} className=\"form-group\">\n              <label htmlFor={field.name}>\n                {field.label} {field.required && <span className=\"required\">*</span>}\n              </label>\n              {renderField(field)}\n            </div>\n          ))}\n        </div>\n\n        {schema.relationships && schema.relationships.length > 0 && (\n          <div className=\"form-relationships\">\n            <h3>Relationships</h3>\n            {schema.relationships.map(relationship => (\n              <div key={relationship.name}>\n                {renderRelationshipField(relationship)}\n              </div>\n            ))}\n          </div>\n        )}\n\n        <div className=\"form-actions\">\n          <button type=\"button\" className=\"btn-secondary\" onClick={onClose}>\n            Cancel\n          </button>\n          <button type=\"submit\" className=\"btn-primary\">\n            {entity ? 'Update' : 'Create'} {schema.name}\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default EntityForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}