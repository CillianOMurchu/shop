{"ast":null,"code":"var _jsxFileName = \"/home/cillianomurchu/projects/store/frontend/src/components/EntityForm.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectSchemaByName } from '../store/slices/schemasSlice';\nimport { selectAllEntitiesByType, selectRelationships } from '../store/slices/entitiesSlice';\nimport { createEntity, updateEntity, setRelationship } from '../store/slices/entitiesSlice';\nimport ImageUpload from './ImageUpload';\nimport { imageService } from '../services/imageService';\nimport { apiService } from '../services/apiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EntityForm = ({\n  entityType,\n  entity,\n  onClose\n}) => {\n  _s2();\n  const dispatch = useDispatch();\n  const schema = useSelector(state => selectSchemaByName(state, entityType));\n  const existingRelationships = useSelector(state => entity ? selectRelationships(state, entityType, entity.id) : {});\n  const [formData, setFormData] = useState({});\n  const [relationships, setRelationships] = useState({});\n  useEffect(() => {\n    if (entity) {\n      setFormData(entity);\n\n      // Load existing relationships\n      const relationshipState = {};\n      if (schema !== null && schema !== void 0 && schema.relationships) {\n        schema.relationships.forEach(relationship => {\n          if (existingRelationships[relationship.name]) {\n            relationshipState[relationship.name] = {\n              targetType: relationship.target,\n              selectedIds: existingRelationships[relationship.name].map(rel => rel.id)\n            };\n          }\n        });\n      }\n      setRelationships(relationshipState);\n    } else {\n      // Initialize with default values\n      const initialData = {};\n      schema === null || schema === void 0 ? void 0 : schema.fields.forEach(field => {\n        if (field.default !== undefined) {\n          initialData[field.name] = field.default;\n        }\n      });\n      setFormData(initialData);\n      setRelationships({});\n    }\n  }, [entity, schema, existingRelationships]);\n  const handleFieldChange = (fieldName, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [fieldName]: value\n    }));\n  };\n  const handleRelationshipChange = (relationshipName, targetType, selectedIds) => {\n    setRelationships(prev => ({\n      ...prev,\n      [relationshipName]: {\n        targetType,\n        selectedIds\n      }\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Process images before saving\n    const processedFormData = {\n      ...formData\n    };\n\n    // Process single images\n    for (const [fieldName, value] of Object.entries(formData)) {\n      if (value && typeof value === 'object' && value.dataUrl) {\n        try {\n          processedFormData[fieldName] = await imageService.processImageForStorage(value);\n        } catch (error) {\n          console.error('Failed to process image:', error);\n        }\n      }\n\n      // Process image galleries\n      if (Array.isArray(value) && value.length > 0 && value[0].dataUrl) {\n        try {\n          const processedImages = await Promise.all(value.map(img => imageService.processImageForStorage(img)));\n          processedFormData[fieldName] = processedImages;\n        } catch (error) {\n          console.error('Failed to process gallery images:', error);\n        }\n      }\n    }\n    let entityId;\n    if (entity) {\n      // Update existing entity\n      entityId = entity.id;\n      dispatch(updateEntity({\n        entityType,\n        entityId: entity.id,\n        entityData: processedFormData\n      }));\n    } else {\n      // Create new entity\n      const createAction = dispatch(createEntity({\n        entityType,\n        entityData: processedFormData\n      }));\n      // Get the generated ID from the action\n      entityId = createAction.payload.id;\n    }\n\n    // Handle relationships with the correct entity ID\n    Object.entries(relationships).forEach(([relationshipName, {\n      targetType,\n      selectedIds\n    }]) => {\n      selectedIds.forEach(targetId => {\n        dispatch(setRelationship({\n          fromType: entityType,\n          fromId: entityId,\n          toType: targetType,\n          toId: targetId,\n          relationshipType: relationshipName\n        }));\n      });\n    });\n    onClose();\n  };\n  const renderField = field => {\n    const value = formData[field.name] || '';\n    switch (field.type) {\n      case 'string':\n        return /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: value,\n          onChange: e => handleFieldChange(field.name, e.target.value),\n          required: field.required\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this);\n      case 'text':\n        return /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: value,\n          onChange: e => handleFieldChange(field.name, e.target.value),\n          required: field.required,\n          rows: 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this);\n      case 'number':\n        return /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: value,\n          onChange: e => handleFieldChange(field.name, parseFloat(e.target.value)),\n          required: field.required\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this);\n      case 'boolean':\n        return /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: value,\n          onChange: e => handleFieldChange(field.name, e.target.checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this);\n      case 'image':\n        return /*#__PURE__*/_jsxDEV(ImageUpload, {\n          value: value,\n          onChange: imageData => handleFieldChange(field.name, imageData),\n          multiple: false,\n          label: `Upload ${field.label}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this);\n      case 'image_gallery':\n        return /*#__PURE__*/_jsxDEV(ImageUpload, {\n          value: value || [],\n          onChange: imageArray => handleFieldChange(field.name, imageArray),\n          multiple: true,\n          label: `Upload ${field.label}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: value,\n          onChange: e => handleFieldChange(field.name, e.target.value),\n          required: field.required\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this);\n    }\n  };\n  const renderRelationshipField = relationship => {\n    var _s = $RefreshSig$();\n    const RelationshipSelector = ({\n      relationship\n    }) => {\n      _s();\n      var _relationships$relati, _relationships$relati2;\n      const availableEntities = useSelector(state => selectAllEntitiesByType(state, relationship.target));\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"relationship-field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: relationship.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this), relationship.type === 'belongsTo' ? /*#__PURE__*/_jsxDEV(\"select\", {\n          value: ((_relationships$relati = relationships[relationship.name]) === null || _relationships$relati === void 0 ? void 0 : (_relationships$relati2 = _relationships$relati.selectedIds) === null || _relationships$relati2 === void 0 ? void 0 : _relationships$relati2[0]) || '',\n          onChange: e => handleRelationshipChange(relationship.name, relationship.target, e.target.value ? [e.target.value] : []),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: [\"Select \", relationship.label]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 15\n          }, this), availableEntities.map(entity => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: entity.id,\n            children: entity.name || entity.title || `${relationship.target} #${entity.id.slice(0, 8)}`\n          }, entity.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"multi-select\",\n          children: availableEntities.map(entity => {\n            var _relationships$relati3, _relationships$relati4;\n            return /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"checkbox-label\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: ((_relationships$relati3 = relationships[relationship.name]) === null || _relationships$relati3 === void 0 ? void 0 : (_relationships$relati4 = _relationships$relati3.selectedIds) === null || _relationships$relati4 === void 0 ? void 0 : _relationships$relati4.includes(entity.id)) || false,\n                onChange: e => {\n                  var _relationships$relati5;\n                  const currentIds = ((_relationships$relati5 = relationships[relationship.name]) === null || _relationships$relati5 === void 0 ? void 0 : _relationships$relati5.selectedIds) || [];\n                  const newIds = e.target.checked ? [...currentIds, entity.id] : currentIds.filter(id => id !== entity.id);\n                  handleRelationshipChange(relationship.name, relationship.target, newIds);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 19\n              }, this), entity.name || entity.title || `${relationship.target} #${entity.id.slice(0, 8)}`]\n            }, entity.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this);\n    };\n    _s(RelationshipSelector, \"axXf9O0oaBsz9wNgciNgFa7O0GM=\", false, function () {\n      return [useSelector];\n    });\n    return /*#__PURE__*/_jsxDEV(RelationshipSelector, {\n      relationship: relationship\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 12\n    }, this);\n  };\n  if (!schema) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Schema not found for \", entityType]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"entity-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [entity ? 'Edit' : 'Create', \" \", schema.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-btn\",\n        onClick: onClose,\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-fields\",\n        children: schema.fields.map(field => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: field.name,\n            children: [field.label, \" \", field.required && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"required\",\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 50\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 15\n          }, this), renderField(field)]\n        }, field.name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this), schema.relationships && schema.relationships.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-relationships\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Relationships\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 13\n        }, this), schema.relationships.map(relationship => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: renderRelationshipField(relationship)\n        }, relationship.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn-secondary\",\n          onClick: onClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn-primary\",\n          children: [entity ? 'Update' : 'Create', \" \", schema.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 262,\n    columnNumber: 5\n  }, this);\n};\n_s2(EntityForm, \"ey434oyscvQEED28jX3fwl255es=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = EntityForm;\nexport default EntityForm;\nvar _c;\n$RefreshReg$(_c, \"EntityForm\");","map":{"version":3,"names":["React","useState","useEffect","useSelector","useDispatch","selectSchemaByName","selectAllEntitiesByType","selectRelationships","createEntity","updateEntity","setRelationship","ImageUpload","imageService","apiService","jsxDEV","_jsxDEV","EntityForm","entityType","entity","onClose","_s2","dispatch","schema","state","existingRelationships","id","formData","setFormData","relationships","setRelationships","relationshipState","forEach","relationship","name","targetType","target","selectedIds","map","rel","initialData","fields","field","default","undefined","handleFieldChange","fieldName","value","prev","handleRelationshipChange","relationshipName","handleSubmit","e","preventDefault","processedFormData","Object","entries","dataUrl","processImageForStorage","error","console","Array","isArray","length","processedImages","Promise","all","img","entityId","entityData","createAction","payload","targetId","fromType","fromId","toType","toId","relationshipType","renderField","type","onChange","required","fileName","_jsxFileName","lineNumber","columnNumber","rows","parseFloat","checked","imageData","multiple","label","imageArray","renderRelationshipField","_s","$RefreshSig$","RelationshipSelector","_relationships$relati","_relationships$relati2","availableEntities","className","children","title","slice","_relationships$relati3","_relationships$relati4","includes","_relationships$relati5","currentIds","newIds","filter","onClick","onSubmit","htmlFor","_c","$RefreshReg$"],"sources":["/home/cillianomurchu/projects/store/frontend/src/components/EntityForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectSchemaByName } from '../store/slices/schemasSlice';\nimport { selectAllEntitiesByType, selectRelationships } from '../store/slices/entitiesSlice';\nimport { createEntity, updateEntity, setRelationship } from '../store/slices/entitiesSlice';\nimport ImageUpload from './ImageUpload';\nimport { imageService } from '../services/imageService';\nimport { apiService } from '../services/apiService';\n\nconst EntityForm = ({ entityType, entity, onClose }) => {\n  const dispatch = useDispatch();\n  const schema = useSelector(state => selectSchemaByName(state, entityType));\n  const existingRelationships = useSelector(state => \n    entity ? selectRelationships(state, entityType, entity.id) : {}\n  );\n  \n  const [formData, setFormData] = useState({});\n  const [relationships, setRelationships] = useState({});\n\n  useEffect(() => {\n    if (entity) {\n      setFormData(entity);\n      \n      // Load existing relationships\n      const relationshipState = {};\n      if (schema?.relationships) {\n        schema.relationships.forEach(relationship => {\n          if (existingRelationships[relationship.name]) {\n            relationshipState[relationship.name] = {\n              targetType: relationship.target,\n              selectedIds: existingRelationships[relationship.name].map(rel => rel.id)\n            };\n          }\n        });\n      }\n      setRelationships(relationshipState);\n    } else {\n      // Initialize with default values\n      const initialData = {};\n      schema?.fields.forEach(field => {\n        if (field.default !== undefined) {\n          initialData[field.name] = field.default;\n        }\n      });\n      setFormData(initialData);\n      setRelationships({});\n    }\n  }, [entity, schema, existingRelationships]);\n\n  const handleFieldChange = (fieldName, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [fieldName]: value\n    }));\n  };\n\n  const handleRelationshipChange = (relationshipName, targetType, selectedIds) => {\n    setRelationships(prev => ({\n      ...prev,\n      [relationshipName]: { targetType, selectedIds }\n    }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    // Process images before saving\n    const processedFormData = { ...formData };\n    \n    // Process single images\n    for (const [fieldName, value] of Object.entries(formData)) {\n      if (value && typeof value === 'object' && value.dataUrl) {\n        try {\n          processedFormData[fieldName] = await imageService.processImageForStorage(value);\n        } catch (error) {\n          console.error('Failed to process image:', error);\n        }\n      }\n      \n      // Process image galleries\n      if (Array.isArray(value) && value.length > 0 && value[0].dataUrl) {\n        try {\n          const processedImages = await Promise.all(\n            value.map(img => imageService.processImageForStorage(img))\n          );\n          processedFormData[fieldName] = processedImages;\n        } catch (error) {\n          console.error('Failed to process gallery images:', error);\n        }\n      }\n    }\n    \n    let entityId;\n    \n    if (entity) {\n      // Update existing entity\n      entityId = entity.id;\n      dispatch(updateEntity({ \n        entityType, \n        entityId: entity.id, \n        entityData: processedFormData \n      }));\n    } else {\n      // Create new entity\n      const createAction = dispatch(createEntity({ \n        entityType, \n        entityData: processedFormData \n      }));\n      // Get the generated ID from the action\n      entityId = createAction.payload.id;\n    }\n\n    // Handle relationships with the correct entity ID\n    Object.entries(relationships).forEach(([relationshipName, { targetType, selectedIds }]) => {\n      selectedIds.forEach(targetId => {\n        dispatch(setRelationship({\n          fromType: entityType,\n          fromId: entityId,\n          toType: targetType,\n          toId: targetId,\n          relationshipType: relationshipName\n        }));\n      });\n    });\n\n    onClose();\n  };\n\n  const renderField = (field) => {\n    const value = formData[field.name] || '';\n\n    switch (field.type) {\n      case 'string':\n        return (\n          <input\n            type=\"text\"\n            value={value}\n            onChange={(e) => handleFieldChange(field.name, e.target.value)}\n            required={field.required}\n          />\n        );\n      \n      case 'text':\n        return (\n          <textarea\n            value={value}\n            onChange={(e) => handleFieldChange(field.name, e.target.value)}\n            required={field.required}\n            rows={4}\n          />\n        );\n      \n      case 'number':\n        return (\n          <input\n            type=\"number\"\n            value={value}\n            onChange={(e) => handleFieldChange(field.name, parseFloat(e.target.value))}\n            required={field.required}\n          />\n        );\n      \n      case 'boolean':\n        return (\n          <input\n            type=\"checkbox\"\n            checked={value}\n            onChange={(e) => handleFieldChange(field.name, e.target.checked)}\n          />\n        );\n      \n      case 'image':\n        return (\n          <ImageUpload\n            value={value}\n            onChange={(imageData) => handleFieldChange(field.name, imageData)}\n            multiple={false}\n            label={`Upload ${field.label}`}\n          />\n        );\n      \n      case 'image_gallery':\n        return (\n          <ImageUpload\n            value={value || []}\n            onChange={(imageArray) => handleFieldChange(field.name, imageArray)}\n            multiple={true}\n            label={`Upload ${field.label}`}\n          />\n        );\n      \n      default:\n        return (\n          <input\n            type=\"text\"\n            value={value}\n            onChange={(e) => handleFieldChange(field.name, e.target.value)}\n            required={field.required}\n          />\n        );\n    }\n  };\n\n  const renderRelationshipField = (relationship) => {\n    const RelationshipSelector = ({ relationship }) => {\n      const availableEntities = useSelector(state => \n        selectAllEntitiesByType(state, relationship.target)\n      );\n\n      return (\n        <div className=\"relationship-field\">\n          <label>{relationship.label}</label>\n          {relationship.type === 'belongsTo' ? (\n            <select\n              value={relationships[relationship.name]?.selectedIds?.[0] || ''}\n              onChange={(e) => handleRelationshipChange(\n                relationship.name, \n                relationship.target, \n                e.target.value ? [e.target.value] : []\n              )}\n            >\n              <option value=\"\">Select {relationship.label}</option>\n              {availableEntities.map(entity => (\n                <option key={entity.id} value={entity.id}>\n                  {entity.name || entity.title || `${relationship.target} #${entity.id.slice(0, 8)}`}\n                </option>\n              ))}\n            </select>\n          ) : (\n            <div className=\"multi-select\">\n              {availableEntities.map(entity => (\n                <label key={entity.id} className=\"checkbox-label\">\n                  <input\n                    type=\"checkbox\"\n                    checked={relationships[relationship.name]?.selectedIds?.includes(entity.id) || false}\n                    onChange={(e) => {\n                      const currentIds = relationships[relationship.name]?.selectedIds || [];\n                      const newIds = e.target.checked \n                        ? [...currentIds, entity.id]\n                        : currentIds.filter(id => id !== entity.id);\n                      \n                      handleRelationshipChange(relationship.name, relationship.target, newIds);\n                    }}\n                  />\n                  {entity.name || entity.title || `${relationship.target} #${entity.id.slice(0, 8)}`}\n                </label>\n              ))}\n            </div>\n          )}\n        </div>\n      );\n    };\n\n    return <RelationshipSelector relationship={relationship} />;\n  };\n\n  if (!schema) {\n    return <div>Schema not found for {entityType}</div>;\n  }\n\n  return (\n    <div className=\"entity-form\">\n      <div className=\"form-header\">\n        <h2>{entity ? 'Edit' : 'Create'} {schema.name}</h2>\n        <button className=\"close-btn\" onClick={onClose}>×</button>\n      </div>\n      \n      <form onSubmit={handleSubmit}>\n        <div className=\"form-fields\">\n          {schema.fields.map(field => (\n            <div key={field.name} className=\"form-group\">\n              <label htmlFor={field.name}>\n                {field.label} {field.required && <span className=\"required\">*</span>}\n              </label>\n              {renderField(field)}\n            </div>\n          ))}\n        </div>\n\n        {schema.relationships && schema.relationships.length > 0 && (\n          <div className=\"form-relationships\">\n            <h3>Relationships</h3>\n            {schema.relationships.map(relationship => (\n              <div key={relationship.name}>\n                {renderRelationshipField(relationship)}\n              </div>\n            ))}\n          </div>\n        )}\n\n        <div className=\"form-actions\">\n          <button type=\"button\" className=\"btn-secondary\" onClick={onClose}>\n            Cancel\n          </button>\n          <button type=\"submit\" className=\"btn-primary\">\n            {entity ? 'Update' : 'Create'} {schema.name}\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default EntityForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}