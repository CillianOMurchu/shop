{"ast":null,"code":"var _jsxFileName = \"/home/cillianomurchu/projects/store/frontend/src/components/AdminInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectSchemaNames } from '../store/slices/schemasSlice';\nimport { loadEntities } from '../store/slices/entitiesSlice';\nimport EntityList from './EntityList';\nimport EntityForm from './EntityForm';\nimport SchemaManager from './SchemaManager';\nimport { apiService } from '../services/apiService';\nimport './AdminInterface.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminInterface = () => {\n  _s();\n  const dispatch = useDispatch();\n  const schemaNames = useSelector(selectSchemaNames);\n  const [activeTab, setActiveTab] = useState('entities');\n  const [selectedEntityType, setSelectedEntityType] = useState('');\n  const [selectedEntity, setSelectedEntity] = useState(null);\n  const [showForm, setShowForm] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  // Load entities from backend when entity type is selected\n  useEffect(() => {\n    const loadEntitiesFromBackend = async () => {\n      if (!selectedEntityType) return;\n      setLoading(true);\n      try {\n        const response = await apiService.getEntities(selectedEntityType);\n        const entities = response.data || [];\n\n        // Convert array to object format for Redux\n        const entitiesObj = {};\n        entities.forEach(entity => {\n          entitiesObj[entity.id] = entity;\n        });\n        dispatch(loadEntities({\n          entityType: selectedEntityType,\n          entities: entitiesObj\n        }));\n      } catch (error) {\n        console.error('Failed to load entities:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (selectedEntityType) {\n      loadEntitiesFromBackend();\n    }\n  }, [selectedEntityType, dispatch]);\n  const handleEntitySelect = entity => {\n    setSelectedEntity(entity);\n    setShowForm(true);\n  };\n  const handleNewEntity = () => {\n    setSelectedEntity(null);\n    setShowForm(true);\n  };\n  const handleFormClose = () => {\n    setShowForm(false);\n    setSelectedEntity(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-interface\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"admin-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Generic Admin Interface\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n        className: \"admin-nav\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: activeTab === 'entities' ? 'active' : '',\n          onClick: () => setActiveTab('entities'),\n          children: \"Manage Entities\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: activeTab === 'schemas' ? 'active' : '',\n          onClick: () => setActiveTab('schemas'),\n          children: \"Manage Schemas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"admin-content\",\n      children: [activeTab === 'entities' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"entities-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"entity-type-selector\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"entityType\",\n            children: \"Select Entity Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"entityType\",\n            value: selectedEntityType,\n            onChange: e => setSelectedEntityType(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Choose an entity type...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this), schemaNames.map(name => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: name,\n              children: name\n            }, name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), selectedEntityType && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"entity-management\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"entity-actions\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn-primary\",\n              onClick: handleNewEntity,\n              children: [\"Create New \", selectedEntityType]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(EntityList, {\n            entityType: selectedEntityType,\n            onEntitySelect: handleEntitySelect\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 17\n          }, this), showForm && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-overlay\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"modal\",\n              children: /*#__PURE__*/_jsxDEV(EntityForm, {\n                entityType: selectedEntityType,\n                entity: selectedEntity,\n                onClose: handleFormClose\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), activeTab === 'schemas' && /*#__PURE__*/_jsxDEV(SchemaManager, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminInterface, \"QweuZde+ssKQ+3q920hm80mF8ig=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = AdminInterface;\nexport default AdminInterface;\nvar _c;\n$RefreshReg$(_c, \"AdminInterface\");","map":{"version":3,"names":["React","useState","useEffect","useSelector","useDispatch","selectSchemaNames","loadEntities","EntityList","EntityForm","SchemaManager","apiService","jsxDEV","_jsxDEV","AdminInterface","_s","dispatch","schemaNames","activeTab","setActiveTab","selectedEntityType","setSelectedEntityType","selectedEntity","setSelectedEntity","showForm","setShowForm","loading","setLoading","loadEntitiesFromBackend","response","getEntities","entities","data","entitiesObj","forEach","entity","id","entityType","error","console","handleEntitySelect","handleNewEntity","handleFormClose","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","htmlFor","value","onChange","e","target","map","name","onEntitySelect","onClose","_c","$RefreshReg$"],"sources":["/home/cillianomurchu/projects/store/frontend/src/components/AdminInterface.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectSchemaNames } from '../store/slices/schemasSlice';\nimport { loadEntities } from '../store/slices/entitiesSlice';\nimport EntityList from './EntityList';\nimport EntityForm from './EntityForm';\nimport SchemaManager from './SchemaManager';\nimport { apiService } from '../services/apiService';\nimport './AdminInterface.css';\n\nconst AdminInterface = () => {\n  const dispatch = useDispatch();\n  const schemaNames = useSelector(selectSchemaNames);\n  \n  const [activeTab, setActiveTab] = useState('entities');\n  const [selectedEntityType, setSelectedEntityType] = useState('');\n  const [selectedEntity, setSelectedEntity] = useState(null);\n  const [showForm, setShowForm] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  // Load entities from backend when entity type is selected\n  useEffect(() => {\n    const loadEntitiesFromBackend = async () => {\n      if (!selectedEntityType) return;\n      \n      setLoading(true);\n      try {\n        const response = await apiService.getEntities(selectedEntityType);\n        const entities = response.data || [];\n        \n        // Convert array to object format for Redux\n        const entitiesObj = {};\n        entities.forEach(entity => {\n          entitiesObj[entity.id] = entity;\n        });\n        \n        dispatch(loadEntities({ \n          entityType: selectedEntityType, \n          entities: entitiesObj \n        }));\n      } catch (error) {\n        console.error('Failed to load entities:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (selectedEntityType) {\n      loadEntitiesFromBackend();\n    }\n  }, [selectedEntityType, dispatch]);\n\n  const handleEntitySelect = (entity) => {\n    setSelectedEntity(entity);\n    setShowForm(true);\n  };\n\n  const handleNewEntity = () => {\n    setSelectedEntity(null);\n    setShowForm(true);\n  };\n\n  const handleFormClose = () => {\n    setShowForm(false);\n    setSelectedEntity(null);\n  };\n\n  return (\n    <div className=\"admin-interface\">\n      <header className=\"admin-header\">\n        <h1>Generic Admin Interface</h1>\n        <nav className=\"admin-nav\">\n          <button \n            className={activeTab === 'entities' ? 'active' : ''}\n            onClick={() => setActiveTab('entities')}\n          >\n            Manage Entities\n          </button>\n          <button \n            className={activeTab === 'schemas' ? 'active' : ''}\n            onClick={() => setActiveTab('schemas')}\n          >\n            Manage Schemas\n          </button>\n        </nav>\n      </header>\n\n      <main className=\"admin-content\">\n        {activeTab === 'entities' && (\n          <div className=\"entities-section\">\n            <div className=\"entity-type-selector\">\n              <label htmlFor=\"entityType\">Select Entity Type:</label>\n              <select \n                id=\"entityType\"\n                value={selectedEntityType} \n                onChange={(e) => setSelectedEntityType(e.target.value)}\n              >\n                <option value=\"\">Choose an entity type...</option>\n                {schemaNames.map(name => (\n                  <option key={name} value={name}>{name}</option>\n                ))}\n              </select>\n            </div>\n\n            {selectedEntityType && (\n              <div className=\"entity-management\">\n                <div className=\"entity-actions\">\n                  <button \n                    className=\"btn-primary\"\n                    onClick={handleNewEntity}\n                  >\n                    Create New {selectedEntityType}\n                  </button>\n                </div>\n\n                <EntityList \n                  entityType={selectedEntityType}\n                  onEntitySelect={handleEntitySelect}\n                />\n\n                {showForm && (\n                  <div className=\"modal-overlay\">\n                    <div className=\"modal\">\n                      <EntityForm \n                        entityType={selectedEntityType}\n                        entity={selectedEntity}\n                        onClose={handleFormClose}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        )}\n\n        {activeTab === 'schemas' && (\n          <SchemaManager />\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default AdminInterface;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}