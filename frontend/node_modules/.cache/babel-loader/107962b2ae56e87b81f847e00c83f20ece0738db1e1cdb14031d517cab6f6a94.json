{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { v4 as uuidv4 } from 'uuid';\nconst initialState = {\n  // Structure: { entityType: { entityId: entityData } }\n  data: {},\n  // Keep track of relationships between entities\n  relationships: {}\n};\nconst entitiesSlice = createSlice({\n  name: 'entities',\n  initialState,\n  reducers: {\n    createEntity: {\n      reducer: (state, action) => {\n        const {\n          entityType,\n          entityData,\n          id\n        } = action.payload;\n        if (!state.data[entityType]) {\n          state.data[entityType] = {};\n        }\n        state.data[entityType][id] = {\n          id,\n          ...entityData,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        };\n      },\n      prepare: payload => {\n        const id = uuidv4();\n        return {\n          payload: {\n            ...payload,\n            id\n          }\n        };\n      }\n    },\n    updateEntity: (state, action) => {\n      const {\n        entityType,\n        entityId,\n        entityData\n      } = action.payload;\n      if (state.data[entityType] && state.data[entityType][entityId]) {\n        state.data[entityType][entityId] = {\n          ...state.data[entityType][entityId],\n          ...entityData,\n          updatedAt: new Date().toISOString()\n        };\n      }\n    },\n    deleteEntity: (state, action) => {\n      const {\n        entityType,\n        entityId\n      } = action.payload;\n      if (state.data[entityType] && state.data[entityType][entityId]) {\n        delete state.data[entityType][entityId];\n\n        // Clean up relationships\n        if (state.relationships[entityType] && state.relationships[entityType][entityId]) {\n          delete state.relationships[entityType][entityId];\n        }\n      }\n    },\n    setRelationship: (state, action) => {\n      const {\n        fromType,\n        fromId,\n        toType,\n        toId,\n        relationshipType\n      } = action.payload;\n      if (!state.relationships[fromType]) {\n        state.relationships[fromType] = {};\n      }\n      if (!state.relationships[fromType][fromId]) {\n        state.relationships[fromType][fromId] = {};\n      }\n      if (!state.relationships[fromType][fromId][relationshipType]) {\n        state.relationships[fromType][fromId][relationshipType] = [];\n      }\n\n      // Add relationship if it doesn't exist\n      const relationship = {\n        type: toType,\n        id: toId\n      };\n      const exists = state.relationships[fromType][fromId][relationshipType].some(rel => rel.type === toType && rel.id === toId);\n      if (!exists) {\n        state.relationships[fromType][fromId][relationshipType].push(relationship);\n      }\n    },\n    removeRelationship: (state, action) => {\n      const {\n        fromType,\n        fromId,\n        toType,\n        toId,\n        relationshipType\n      } = action.payload;\n      if (state.relationships[fromType] && state.relationships[fromType][fromId] && state.relationships[fromType][fromId][relationshipType]) {\n        state.relationships[fromType][fromId][relationshipType] = state.relationships[fromType][fromId][relationshipType].filter(rel => !(rel.type === toType && rel.id === toId));\n      }\n    },\n    loadEntities: (state, action) => {\n      // For future API integration\n      const {\n        entityType,\n        entities\n      } = action.payload;\n      state.data[entityType] = entities;\n    }\n  }\n});\nexport const {\n  createEntity,\n  updateEntity,\n  deleteEntity,\n  setRelationship,\n  removeRelationship,\n  loadEntities\n} = entitiesSlice.actions;\n\n// Selectors\nexport const selectAllEntitiesByType = (state, entityType) => state.entities.data[entityType] ? Object.values(state.entities.data[entityType]) : [];\nexport const selectEntityById = (state, entityType, entityId) => state.entities.data[entityType] ? state.entities.data[entityType][entityId] : null;\nexport const selectEntityTypes = state => Object.keys(state.entities.data);\nexport const selectRelationships = (state, entityType, entityId) => state.entities.relationships[entityType] ? state.entities.relationships[entityType][entityId] : {};\nexport default entitiesSlice.reducer;","map":{"version":3,"names":["createSlice","v4","uuidv4","initialState","data","relationships","entitiesSlice","name","reducers","createEntity","reducer","state","action","entityType","entityData","id","payload","createdAt","Date","toISOString","updatedAt","prepare","updateEntity","entityId","deleteEntity","setRelationship","fromType","fromId","toType","toId","relationshipType","relationship","type","exists","some","rel","push","removeRelationship","filter","loadEntities","entities","actions","selectAllEntitiesByType","Object","values","selectEntityById","selectEntityTypes","keys","selectRelationships"],"sources":["/home/cillianomurchu/projects/store/frontend/src/store/slices/entitiesSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst initialState = {\n  // Structure: { entityType: { entityId: entityData } }\n  data: {},\n  // Keep track of relationships between entities\n  relationships: {},\n};\n\nconst entitiesSlice = createSlice({\n  name: 'entities',\n  initialState,\n  reducers: {\n    createEntity: {\n      reducer: (state, action) => {\n        const { entityType, entityData, id } = action.payload;\n        \n        if (!state.data[entityType]) {\n          state.data[entityType] = {};\n        }\n        \n        state.data[entityType][id] = {\n          id,\n          ...entityData,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n        };\n      },\n      prepare: (payload) => {\n        const id = uuidv4();\n        return {\n          payload: {\n            ...payload,\n            id\n          }\n        };\n      }\n    },\n    \n    updateEntity: (state, action) => {\n      const { entityType, entityId, entityData } = action.payload;\n      \n      if (state.data[entityType] && state.data[entityType][entityId]) {\n        state.data[entityType][entityId] = {\n          ...state.data[entityType][entityId],\n          ...entityData,\n          updatedAt: new Date().toISOString(),\n        };\n      }\n    },\n    \n    deleteEntity: (state, action) => {\n      const { entityType, entityId } = action.payload;\n      \n      if (state.data[entityType] && state.data[entityType][entityId]) {\n        delete state.data[entityType][entityId];\n        \n        // Clean up relationships\n        if (state.relationships[entityType] && state.relationships[entityType][entityId]) {\n          delete state.relationships[entityType][entityId];\n        }\n      }\n    },\n    \n    setRelationship: (state, action) => {\n      const { fromType, fromId, toType, toId, relationshipType } = action.payload;\n      \n      if (!state.relationships[fromType]) {\n        state.relationships[fromType] = {};\n      }\n      \n      if (!state.relationships[fromType][fromId]) {\n        state.relationships[fromType][fromId] = {};\n      }\n      \n      if (!state.relationships[fromType][fromId][relationshipType]) {\n        state.relationships[fromType][fromId][relationshipType] = [];\n      }\n      \n      // Add relationship if it doesn't exist\n      const relationship = { type: toType, id: toId };\n      const exists = state.relationships[fromType][fromId][relationshipType].some(\n        rel => rel.type === toType && rel.id === toId\n      );\n      \n      if (!exists) {\n        state.relationships[fromType][fromId][relationshipType].push(relationship);\n      }\n    },\n    \n    removeRelationship: (state, action) => {\n      const { fromType, fromId, toType, toId, relationshipType } = action.payload;\n      \n      if (state.relationships[fromType] && \n          state.relationships[fromType][fromId] && \n          state.relationships[fromType][fromId][relationshipType]) {\n        \n        state.relationships[fromType][fromId][relationshipType] = \n          state.relationships[fromType][fromId][relationshipType].filter(\n            rel => !(rel.type === toType && rel.id === toId)\n          );\n      }\n    },\n    \n    loadEntities: (state, action) => {\n      // For future API integration\n      const { entityType, entities } = action.payload;\n      state.data[entityType] = entities;\n    },\n  },\n});\n\nexport const {\n  createEntity,\n  updateEntity,\n  deleteEntity,\n  setRelationship,\n  removeRelationship,\n  loadEntities,\n} = entitiesSlice.actions;\n\n// Selectors\nexport const selectAllEntitiesByType = (state, entityType) => \n  state.entities.data[entityType] ? Object.values(state.entities.data[entityType]) : [];\n\nexport const selectEntityById = (state, entityType, entityId) => \n  state.entities.data[entityType] ? state.entities.data[entityType][entityId] : null;\n\nexport const selectEntityTypes = (state) => Object.keys(state.entities.data);\n\nexport const selectRelationships = (state, entityType, entityId) => \n  state.entities.relationships[entityType] ? state.entities.relationships[entityType][entityId] : {};\n\nexport default entitiesSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AAEnC,MAAMC,YAAY,GAAG;EACnB;EACAC,IAAI,EAAE,CAAC,CAAC;EACR;EACAC,aAAa,EAAE,CAAC;AAClB,CAAC;AAED,MAAMC,aAAa,GAAGN,WAAW,CAAC;EAChCO,IAAI,EAAE,UAAU;EAChBJ,YAAY;EACZK,QAAQ,EAAE;IACRC,YAAY,EAAE;MACZC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;QAC1B,MAAM;UAAEC,UAAU;UAAEC,UAAU;UAAEC;QAAG,CAAC,GAAGH,MAAM,CAACI,OAAO;QAErD,IAAI,CAACL,KAAK,CAACP,IAAI,CAACS,UAAU,CAAC,EAAE;UAC3BF,KAAK,CAACP,IAAI,CAACS,UAAU,CAAC,GAAG,CAAC,CAAC;QAC7B;QAEAF,KAAK,CAACP,IAAI,CAACS,UAAU,CAAC,CAACE,EAAE,CAAC,GAAG;UAC3BA,EAAE;UACF,GAAGD,UAAU;UACbG,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;UACnCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;QACpC,CAAC;MACH,CAAC;MACDE,OAAO,EAAGL,OAAO,IAAK;QACpB,MAAMD,EAAE,GAAGb,MAAM,CAAC,CAAC;QACnB,OAAO;UACLc,OAAO,EAAE;YACP,GAAGA,OAAO;YACVD;UACF;QACF,CAAC;MACH;IACF,CAAC;IAEDO,YAAY,EAAEA,CAACX,KAAK,EAAEC,MAAM,KAAK;MAC/B,MAAM;QAAEC,UAAU;QAAEU,QAAQ;QAAET;MAAW,CAAC,GAAGF,MAAM,CAACI,OAAO;MAE3D,IAAIL,KAAK,CAACP,IAAI,CAACS,UAAU,CAAC,IAAIF,KAAK,CAACP,IAAI,CAACS,UAAU,CAAC,CAACU,QAAQ,CAAC,EAAE;QAC9DZ,KAAK,CAACP,IAAI,CAACS,UAAU,CAAC,CAACU,QAAQ,CAAC,GAAG;UACjC,GAAGZ,KAAK,CAACP,IAAI,CAACS,UAAU,CAAC,CAACU,QAAQ,CAAC;UACnC,GAAGT,UAAU;UACbM,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;QACpC,CAAC;MACH;IACF,CAAC;IAEDK,YAAY,EAAEA,CAACb,KAAK,EAAEC,MAAM,KAAK;MAC/B,MAAM;QAAEC,UAAU;QAAEU;MAAS,CAAC,GAAGX,MAAM,CAACI,OAAO;MAE/C,IAAIL,KAAK,CAACP,IAAI,CAACS,UAAU,CAAC,IAAIF,KAAK,CAACP,IAAI,CAACS,UAAU,CAAC,CAACU,QAAQ,CAAC,EAAE;QAC9D,OAAOZ,KAAK,CAACP,IAAI,CAACS,UAAU,CAAC,CAACU,QAAQ,CAAC;;QAEvC;QACA,IAAIZ,KAAK,CAACN,aAAa,CAACQ,UAAU,CAAC,IAAIF,KAAK,CAACN,aAAa,CAACQ,UAAU,CAAC,CAACU,QAAQ,CAAC,EAAE;UAChF,OAAOZ,KAAK,CAACN,aAAa,CAACQ,UAAU,CAAC,CAACU,QAAQ,CAAC;QAClD;MACF;IACF,CAAC;IAEDE,eAAe,EAAEA,CAACd,KAAK,EAAEC,MAAM,KAAK;MAClC,MAAM;QAAEc,QAAQ;QAAEC,MAAM;QAAEC,MAAM;QAAEC,IAAI;QAAEC;MAAiB,CAAC,GAAGlB,MAAM,CAACI,OAAO;MAE3E,IAAI,CAACL,KAAK,CAACN,aAAa,CAACqB,QAAQ,CAAC,EAAE;QAClCf,KAAK,CAACN,aAAa,CAACqB,QAAQ,CAAC,GAAG,CAAC,CAAC;MACpC;MAEA,IAAI,CAACf,KAAK,CAACN,aAAa,CAACqB,QAAQ,CAAC,CAACC,MAAM,CAAC,EAAE;QAC1ChB,KAAK,CAACN,aAAa,CAACqB,QAAQ,CAAC,CAACC,MAAM,CAAC,GAAG,CAAC,CAAC;MAC5C;MAEA,IAAI,CAAChB,KAAK,CAACN,aAAa,CAACqB,QAAQ,CAAC,CAACC,MAAM,CAAC,CAACG,gBAAgB,CAAC,EAAE;QAC5DnB,KAAK,CAACN,aAAa,CAACqB,QAAQ,CAAC,CAACC,MAAM,CAAC,CAACG,gBAAgB,CAAC,GAAG,EAAE;MAC9D;;MAEA;MACA,MAAMC,YAAY,GAAG;QAAEC,IAAI,EAAEJ,MAAM;QAAEb,EAAE,EAAEc;MAAK,CAAC;MAC/C,MAAMI,MAAM,GAAGtB,KAAK,CAACN,aAAa,CAACqB,QAAQ,CAAC,CAACC,MAAM,CAAC,CAACG,gBAAgB,CAAC,CAACI,IAAI,CACzEC,GAAG,IAAIA,GAAG,CAACH,IAAI,KAAKJ,MAAM,IAAIO,GAAG,CAACpB,EAAE,KAAKc,IAC3C,CAAC;MAED,IAAI,CAACI,MAAM,EAAE;QACXtB,KAAK,CAACN,aAAa,CAACqB,QAAQ,CAAC,CAACC,MAAM,CAAC,CAACG,gBAAgB,CAAC,CAACM,IAAI,CAACL,YAAY,CAAC;MAC5E;IACF,CAAC;IAEDM,kBAAkB,EAAEA,CAAC1B,KAAK,EAAEC,MAAM,KAAK;MACrC,MAAM;QAAEc,QAAQ;QAAEC,MAAM;QAAEC,MAAM;QAAEC,IAAI;QAAEC;MAAiB,CAAC,GAAGlB,MAAM,CAACI,OAAO;MAE3E,IAAIL,KAAK,CAACN,aAAa,CAACqB,QAAQ,CAAC,IAC7Bf,KAAK,CAACN,aAAa,CAACqB,QAAQ,CAAC,CAACC,MAAM,CAAC,IACrChB,KAAK,CAACN,aAAa,CAACqB,QAAQ,CAAC,CAACC,MAAM,CAAC,CAACG,gBAAgB,CAAC,EAAE;QAE3DnB,KAAK,CAACN,aAAa,CAACqB,QAAQ,CAAC,CAACC,MAAM,CAAC,CAACG,gBAAgB,CAAC,GACrDnB,KAAK,CAACN,aAAa,CAACqB,QAAQ,CAAC,CAACC,MAAM,CAAC,CAACG,gBAAgB,CAAC,CAACQ,MAAM,CAC5DH,GAAG,IAAI,EAAEA,GAAG,CAACH,IAAI,KAAKJ,MAAM,IAAIO,GAAG,CAACpB,EAAE,KAAKc,IAAI,CACjD,CAAC;MACL;IACF,CAAC;IAEDU,YAAY,EAAEA,CAAC5B,KAAK,EAAEC,MAAM,KAAK;MAC/B;MACA,MAAM;QAAEC,UAAU;QAAE2B;MAAS,CAAC,GAAG5B,MAAM,CAACI,OAAO;MAC/CL,KAAK,CAACP,IAAI,CAACS,UAAU,CAAC,GAAG2B,QAAQ;IACnC;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACX/B,YAAY;EACZa,YAAY;EACZE,YAAY;EACZC,eAAe;EACfY,kBAAkB;EAClBE;AACF,CAAC,GAAGjC,aAAa,CAACmC,OAAO;;AAEzB;AACA,OAAO,MAAMC,uBAAuB,GAAGA,CAAC/B,KAAK,EAAEE,UAAU,KACvDF,KAAK,CAAC6B,QAAQ,CAACpC,IAAI,CAACS,UAAU,CAAC,GAAG8B,MAAM,CAACC,MAAM,CAACjC,KAAK,CAAC6B,QAAQ,CAACpC,IAAI,CAACS,UAAU,CAAC,CAAC,GAAG,EAAE;AAEvF,OAAO,MAAMgC,gBAAgB,GAAGA,CAAClC,KAAK,EAAEE,UAAU,EAAEU,QAAQ,KAC1DZ,KAAK,CAAC6B,QAAQ,CAACpC,IAAI,CAACS,UAAU,CAAC,GAAGF,KAAK,CAAC6B,QAAQ,CAACpC,IAAI,CAACS,UAAU,CAAC,CAACU,QAAQ,CAAC,GAAG,IAAI;AAEpF,OAAO,MAAMuB,iBAAiB,GAAInC,KAAK,IAAKgC,MAAM,CAACI,IAAI,CAACpC,KAAK,CAAC6B,QAAQ,CAACpC,IAAI,CAAC;AAE5E,OAAO,MAAM4C,mBAAmB,GAAGA,CAACrC,KAAK,EAAEE,UAAU,EAAEU,QAAQ,KAC7DZ,KAAK,CAAC6B,QAAQ,CAACnC,aAAa,CAACQ,UAAU,CAAC,GAAGF,KAAK,CAAC6B,QAAQ,CAACnC,aAAa,CAACQ,UAAU,CAAC,CAACU,QAAQ,CAAC,GAAG,CAAC,CAAC;AAEpG,eAAejB,aAAa,CAACI,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}