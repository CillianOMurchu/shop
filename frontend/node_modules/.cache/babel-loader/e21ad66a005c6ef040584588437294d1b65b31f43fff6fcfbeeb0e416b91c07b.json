{"ast":null,"code":"// API configuration for future Rails backend integration\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api/v1';\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  // Generic API methods that will work with Rails REST conventions\n  async request(endpoint, options = {}) {\n    var _document$querySelect;\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n\n    // Add CSRF token for Rails (when available)\n    const csrfToken = (_document$querySelect = document.querySelector('meta[name=\"csrf-token\"]')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.getAttribute('content');\n    if (csrfToken) {\n      config.headers['X-CSRF-Token'] = csrfToken;\n    }\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // CRUD operations for any entity type\n  // Rails convention: GET /api/v1/products, POST /api/v1/products, etc.\n\n  async getEntities(entityType) {\n    return this.request(`/${entityType}`);\n  }\n  async getEntity(entityType, id) {\n    return this.request(`/${entityType}/${id}`);\n  }\n  async createEntity(entityType, data) {\n    const singularKey = entityType.slice(0, -1); // Convert \"products\" to \"product\"\n    const payload = {\n      [singularKey]: data\n    };\n    console.log('Creating entity:', entityType, 'with payload:', payload); // Debug log\n\n    return this.request(`/${entityType}`, {\n      method: 'POST',\n      body: JSON.stringify(payload)\n    });\n  }\n  async updateEntity(entityType, id, data) {\n    return this.request(`/${entityType}/${id}`, {\n      method: 'PATCH',\n      body: JSON.stringify({\n        [entityType.slice(0, -1)]: data\n      }) // Rails expects singular key\n    });\n  }\n  async deleteEntity(entityType, id) {\n    return this.request(`/${entityType}/${id}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Relationship management\n  async addRelationship(fromType, fromId, relationshipType, toType, toId) {\n    return this.request(`/${fromType}/${fromId}/relationships`, {\n      method: 'POST',\n      body: JSON.stringify({\n        relationship: {\n          type: relationshipType,\n          target_type: toType,\n          target_id: toId\n        }\n      })\n    });\n  }\n  async removeRelationship(fromType, fromId, relationshipType, toType, toId) {\n    return this.request(`/${fromType}/${fromId}/relationships/${relationshipType}`, {\n      method: 'DELETE',\n      body: JSON.stringify({\n        target_type: toType,\n        target_id: toId\n      })\n    });\n  }\n\n  // Schema management (for dynamic entity types)\n  async getSchemas() {\n    return this.request('/schemas');\n  }\n  async createSchema(schemaData) {\n    return this.request('/schemas', {\n      method: 'POST',\n      body: JSON.stringify({\n        schema: schemaData\n      })\n    });\n  }\n  async updateSchema(schemaName, schemaData) {\n    return this.request(`/schemas/${schemaName}`, {\n      method: 'PATCH',\n      body: JSON.stringify({\n        schema: schemaData\n      })\n    });\n  }\n}\n\n// Export singleton instance\nexport const apiService = new ApiService();\n\n// Export for testing or different configurations\nexport default ApiService;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","constructor","baseURL","request","endpoint","options","_document$querySelect","url","config","headers","csrfToken","document","querySelector","getAttribute","response","fetch","ok","Error","status","json","error","console","getEntities","entityType","getEntity","id","createEntity","data","singularKey","slice","payload","log","method","body","JSON","stringify","updateEntity","deleteEntity","addRelationship","fromType","fromId","relationshipType","toType","toId","relationship","type","target_type","target_id","removeRelationship","getSchemas","createSchema","schemaData","schema","updateSchema","schemaName","apiService"],"sources":["/home/cillianomurchu/projects/store/frontend/src/services/apiService.js"],"sourcesContent":["// API configuration for future Rails backend integration\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api/v1';\n\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  // Generic API methods that will work with Rails REST conventions\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    // Add CSRF token for Rails (when available)\n    const csrfToken = document.querySelector('meta[name=\"csrf-token\"]')?.getAttribute('content');\n    if (csrfToken) {\n      config.headers['X-CSRF-Token'] = csrfToken;\n    }\n\n    try {\n      const response = await fetch(url, config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // CRUD operations for any entity type\n  // Rails convention: GET /api/v1/products, POST /api/v1/products, etc.\n  \n  async getEntities(entityType) {\n    return this.request(`/${entityType}`);\n  }\n\n  async getEntity(entityType, id) {\n    return this.request(`/${entityType}/${id}`);\n  }\n\n  async createEntity(entityType, data) {\n    const singularKey = entityType.slice(0, -1); // Convert \"products\" to \"product\"\n    const payload = { [singularKey]: data };\n    \n    console.log('Creating entity:', entityType, 'with payload:', payload); // Debug log\n    \n    return this.request(`/${entityType}`, {\n      method: 'POST',\n      body: JSON.stringify(payload),\n    });\n  }\n\n  async updateEntity(entityType, id, data) {\n    return this.request(`/${entityType}/${id}`, {\n      method: 'PATCH',\n      body: JSON.stringify({ [entityType.slice(0, -1)]: data }), // Rails expects singular key\n    });\n  }\n\n  async deleteEntity(entityType, id) {\n    return this.request(`/${entityType}/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Relationship management\n  async addRelationship(fromType, fromId, relationshipType, toType, toId) {\n    return this.request(`/${fromType}/${fromId}/relationships`, {\n      method: 'POST',\n      body: JSON.stringify({\n        relationship: {\n          type: relationshipType,\n          target_type: toType,\n          target_id: toId,\n        }\n      }),\n    });\n  }\n\n  async removeRelationship(fromType, fromId, relationshipType, toType, toId) {\n    return this.request(`/${fromType}/${fromId}/relationships/${relationshipType}`, {\n      method: 'DELETE',\n      body: JSON.stringify({\n        target_type: toType,\n        target_id: toId,\n      }),\n    });\n  }\n\n  // Schema management (for dynamic entity types)\n  async getSchemas() {\n    return this.request('/schemas');\n  }\n\n  async createSchema(schemaData) {\n    return this.request('/schemas', {\n      method: 'POST',\n      body: JSON.stringify({ schema: schemaData }),\n    });\n  }\n\n  async updateSchema(schemaName, schemaData) {\n    return this.request(`/schemas/${schemaName}`, {\n      method: 'PATCH',\n      body: JSON.stringify({ schema: schemaData }),\n    });\n  }\n}\n\n// Export singleton instance\nexport const apiService = new ApiService();\n\n// Export for testing or different configurations\nexport default ApiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}