{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { v4 as uuidv4 } from 'uuid';\nimport { deleteEntity as deleteEntityAPI } from '../../services/apiService';\n\n// Async thunk for deleting entity via API\nexport const deleteEntityAsync = createAsyncThunk('entities/deleteEntityAsync', async ({\n  entityType,\n  entityId\n}, {\n  rejectWithValue\n}) => {\n  try {\n    await deleteEntityAPI(entityType, entityId);\n    return {\n      entityType,\n      entityId\n    };\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nconst initialState = {\n  // Structure: { entityType: { entityId: entityData } }\n  data: {},\n  // Keep track of relationships between entities\n  relationships: {}\n};\nconst entitiesSlice = createSlice({\n  name: 'entities',\n  initialState,\n  reducers: {\n    createEntity: {\n      reducer: (state, action) => {\n        const {\n          entityType,\n          entityData,\n          id\n        } = action.payload;\n        if (!state.data[entityType]) {\n          state.data[entityType] = {};\n        }\n        state.data[entityType][id] = {\n          id,\n          ...entityData,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        };\n      },\n      prepare: payload => {\n        const id = uuidv4();\n        return {\n          payload: {\n            ...payload,\n            id\n          }\n        };\n      }\n    },\n    updateEntity: (state, action) => {\n      const {\n        entityType,\n        entityId,\n        entityData\n      } = action.payload;\n      if (state.data[entityType] && state.data[entityType][entityId]) {\n        state.data[entityType][entityId] = {\n          ...state.data[entityType][entityId],\n          ...entityData,\n          updatedAt: new Date().toISOString()\n        };\n      }\n    },\n    deleteEntity: (state, action) => {\n      const {\n        entityType,\n        entityId\n      } = action.payload;\n      if (state.data[entityType] && state.data[entityType][entityId]) {\n        delete state.data[entityType][entityId];\n\n        // Clean up relationships\n        if (state.relationships[entityType] && state.relationships[entityType][entityId]) {\n          delete state.relationships[entityType][entityId];\n        }\n      }\n    },\n    setRelationship: (state, action) => {\n      const {\n        fromType,\n        fromId,\n        toType,\n        toId,\n        relationshipType\n      } = action.payload;\n      if (!state.relationships[fromType]) {\n        state.relationships[fromType] = {};\n      }\n      if (!state.relationships[fromType][fromId]) {\n        state.relationships[fromType][fromId] = {};\n      }\n      if (!state.relationships[fromType][fromId][relationshipType]) {\n        state.relationships[fromType][fromId][relationshipType] = [];\n      }\n\n      // Add relationship if it doesn't exist\n      const relationship = {\n        type: toType,\n        id: toId\n      };\n      const exists = state.relationships[fromType][fromId][relationshipType].some(rel => rel.type === toType && rel.id === toId);\n      if (!exists) {\n        state.relationships[fromType][fromId][relationshipType].push(relationship);\n      }\n    },\n    removeRelationship: (state, action) => {\n      const {\n        fromType,\n        fromId,\n        toType,\n        toId,\n        relationshipType\n      } = action.payload;\n      if (state.relationships[fromType] && state.relationships[fromType][fromId] && state.relationships[fromType][fromId][relationshipType]) {\n        state.relationships[fromType][fromId][relationshipType] = state.relationships[fromType][fromId][relationshipType].filter(rel => !(rel.type === toType && rel.id === toId));\n      }\n    },\n    loadEntities: (state, action) => {\n      // For future API integration\n      const {\n        entityType,\n        entities\n      } = action.payload;\n      state.data[entityType] = entities;\n    }\n  }\n});\nexport const {\n  createEntity,\n  updateEntity,\n  deleteEntity,\n  setRelationship,\n  removeRelationship,\n  loadEntities\n} = entitiesSlice.actions;\n\n// Selectors\nexport const selectAllEntitiesByType = (state, entityType) => state.entities.data[entityType] ? Object.values(state.entities.data[entityType]) : [];\nexport const selectEntityById = (state, entityType, entityId) => state.entities.data[entityType] ? state.entities.data[entityType][entityId] : null;\nexport const selectEntityTypes = state => Object.keys(state.entities.data);\nexport const selectRelationships = (state, entityType, entityId) => state.entities.relationships[entityType] ? state.entities.relationships[entityType][entityId] : {};\nexport default entitiesSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","v4","uuidv4","deleteEntity","deleteEntityAPI","deleteEntityAsync","entityType","entityId","rejectWithValue","error","message","initialState","data","relationships","entitiesSlice","name","reducers","createEntity","reducer","state","action","entityData","id","payload","createdAt","Date","toISOString","updatedAt","prepare","updateEntity","setRelationship","fromType","fromId","toType","toId","relationshipType","relationship","type","exists","some","rel","push","removeRelationship","filter","loadEntities","entities","actions","selectAllEntitiesByType","Object","values","selectEntityById","selectEntityTypes","keys","selectRelationships"],"sources":["/home/cillianomurchu/projects/store/frontend/src/store/slices/entitiesSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { v4 as uuidv4 } from 'uuid';\nimport { deleteEntity as deleteEntityAPI } from '../../services/apiService';\n\n// Async thunk for deleting entity via API\nexport const deleteEntityAsync = createAsyncThunk(\n  'entities/deleteEntityAsync',\n  async ({ entityType, entityId }, { rejectWithValue }) => {\n    try {\n      await deleteEntityAPI(entityType, entityId);\n      return { entityType, entityId };\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nconst initialState = {\n  // Structure: { entityType: { entityId: entityData } }\n  data: {},\n  // Keep track of relationships between entities\n  relationships: {},\n};\n\nconst entitiesSlice = createSlice({\n  name: 'entities',\n  initialState,\n  reducers: {\n    createEntity: {\n      reducer: (state, action) => {\n        const { entityType, entityData, id } = action.payload;\n        \n        if (!state.data[entityType]) {\n          state.data[entityType] = {};\n        }\n        \n        state.data[entityType][id] = {\n          id,\n          ...entityData,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n        };\n      },\n      prepare: (payload) => {\n        const id = uuidv4();\n        return {\n          payload: {\n            ...payload,\n            id\n          }\n        };\n      }\n    },\n    \n    updateEntity: (state, action) => {\n      const { entityType, entityId, entityData } = action.payload;\n      \n      if (state.data[entityType] && state.data[entityType][entityId]) {\n        state.data[entityType][entityId] = {\n          ...state.data[entityType][entityId],\n          ...entityData,\n          updatedAt: new Date().toISOString(),\n        };\n      }\n    },\n    \n    deleteEntity: (state, action) => {\n      const { entityType, entityId } = action.payload;\n      \n      if (state.data[entityType] && state.data[entityType][entityId]) {\n        delete state.data[entityType][entityId];\n        \n        // Clean up relationships\n        if (state.relationships[entityType] && state.relationships[entityType][entityId]) {\n          delete state.relationships[entityType][entityId];\n        }\n      }\n    },\n    \n    setRelationship: (state, action) => {\n      const { fromType, fromId, toType, toId, relationshipType } = action.payload;\n      \n      if (!state.relationships[fromType]) {\n        state.relationships[fromType] = {};\n      }\n      \n      if (!state.relationships[fromType][fromId]) {\n        state.relationships[fromType][fromId] = {};\n      }\n      \n      if (!state.relationships[fromType][fromId][relationshipType]) {\n        state.relationships[fromType][fromId][relationshipType] = [];\n      }\n      \n      // Add relationship if it doesn't exist\n      const relationship = { type: toType, id: toId };\n      const exists = state.relationships[fromType][fromId][relationshipType].some(\n        rel => rel.type === toType && rel.id === toId\n      );\n      \n      if (!exists) {\n        state.relationships[fromType][fromId][relationshipType].push(relationship);\n      }\n    },\n    \n    removeRelationship: (state, action) => {\n      const { fromType, fromId, toType, toId, relationshipType } = action.payload;\n      \n      if (state.relationships[fromType] && \n          state.relationships[fromType][fromId] && \n          state.relationships[fromType][fromId][relationshipType]) {\n        \n        state.relationships[fromType][fromId][relationshipType] = \n          state.relationships[fromType][fromId][relationshipType].filter(\n            rel => !(rel.type === toType && rel.id === toId)\n          );\n      }\n    },\n    \n    loadEntities: (state, action) => {\n      // For future API integration\n      const { entityType, entities } = action.payload;\n      state.data[entityType] = entities;\n    },\n  },\n});\n\nexport const {\n  createEntity,\n  updateEntity,\n  deleteEntity,\n  setRelationship,\n  removeRelationship,\n  loadEntities,\n} = entitiesSlice.actions;\n\n// Selectors\nexport const selectAllEntitiesByType = (state, entityType) => \n  state.entities.data[entityType] ? Object.values(state.entities.data[entityType]) : [];\n\nexport const selectEntityById = (state, entityType, entityId) => \n  state.entities.data[entityType] ? state.entities.data[entityType][entityId] : null;\n\nexport const selectEntityTypes = (state) => Object.keys(state.entities.data);\n\nexport const selectRelationships = (state, entityType, entityId) => \n  state.entities.relationships[entityType] ? state.entities.relationships[entityType][entityId] : {};\n\nexport default entitiesSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}