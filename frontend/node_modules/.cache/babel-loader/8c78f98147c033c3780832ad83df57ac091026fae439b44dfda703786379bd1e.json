{"ast":null,"code":"// API configuration for future Rails backend integration\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api/v1';\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  // Ensure we use plural resource names for endpoints (Rails expects /products)\n  normalizeEntityType(entityType) {\n    if (!entityType) return entityType;\n    return entityType.endsWith('s') ? entityType : `${entityType}s`;\n  }\n\n  // Naive singularization for param keys (products -> product)\n  singularFromPlural(plural) {\n    if (!plural) return plural;\n    return plural.endsWith('s') ? plural.slice(0, -1) : plural;\n  }\n\n  // Generic API methods that will work with Rails REST conventions\n  async request(endpoint, options = {}) {\n    var _document$querySelect;\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n\n    // Add CSRF token for Rails (when available)\n    const csrfToken = (_document$querySelect = document.querySelector('meta[name=\"csrf-token\"]')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.getAttribute('content');\n    if (csrfToken) {\n      config.headers['X-CSRF-Token'] = csrfToken;\n    }\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // CRUD operations for any entity type\n  // Rails convention: GET /api/v1/products, POST /api/v1/products, etc.\n\n  async getEntities(entityType) {\n    const plural = this.normalizeEntityType(entityType);\n    return this.request(`/${plural}`);\n  }\n  async getEntity(entityType, id) {\n    const plural = this.normalizeEntityType(entityType);\n    return this.request(`/${plural}/${id}`);\n  }\n  async createEntity(entityType, data) {\n    const plural = this.normalizeEntityType(entityType);\n    const singular = this.singularFromPlural(plural);\n    const payload = {\n      [singular]: data\n    };\n    console.log('Creating entity:', plural, 'with payload:', payload); // Debug log\n\n    return this.request(`/${plural}`, {\n      method: 'POST',\n      body: JSON.stringify(payload)\n    });\n  }\n  async updateEntity(entityType, id, data) {\n    const plural = this.normalizeEntityType(entityType);\n    const singular = this.singularFromPlural(plural);\n    return this.request(`/${plural}/${id}`, {\n      method: 'PATCH',\n      body: JSON.stringify({\n        [singular]: data\n      }) // Rails expects singular key\n    });\n  }\n  async deleteEntity(entityType, id) {\n    const plural = this.normalizeEntityType(entityType);\n    return this.request(`/${plural}/${id}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Relationship management\n  async addRelationship(fromType, fromId, relationshipType, toType, toId) {\n    const pluralFrom = this.normalizeEntityType(fromType);\n    const pluralTo = this.normalizeEntityType(toType);\n    return this.request(`/${pluralFrom}/${fromId}/relationships`, {\n      method: 'POST',\n      body: JSON.stringify({\n        relationship: {\n          type: relationshipType,\n          target_type: pluralTo,\n          target_id: toId\n        }\n      })\n    });\n  }\n  async removeRelationship(fromType, fromId, relationshipType, toType, toId) {\n    const pluralFrom = this.normalizeEntityType(fromType);\n    const pluralTo = this.normalizeEntityType(toType);\n    return this.request(`/${pluralFrom}/${fromId}/relationships/${relationshipType}`, {\n      method: 'DELETE',\n      body: JSON.stringify({\n        target_type: pluralTo,\n        target_id: toId\n      })\n    });\n  }\n\n  // Schema management (for dynamic entity types)\n  async getSchemas() {\n    return this.request('/schemas');\n  }\n  async createSchema(schemaData) {\n    return this.request('/schemas', {\n      method: 'POST',\n      body: JSON.stringify({\n        schema: schemaData\n      })\n    });\n  }\n  async updateSchema(schemaName, schemaData) {\n    return this.request(`/schemas/${schemaName}`, {\n      method: 'PATCH',\n      body: JSON.stringify({\n        schema: schemaData\n      })\n    });\n  }\n}\n\n// Export singleton instance\nexport const apiService = new ApiService();\n\n// Export individual methods for convenience\nexport const createEntity = (entityType, data) => apiService.createEntity(entityType, data);\nexport const getEntity = (entityType, id) => apiService.getEntity(entityType, id);\nexport const getAllEntities = entityType => apiService.getAllEntities(entityType);\nexport const updateEntity = (entityType, id, data) => apiService.updateEntity(entityType, id, data);\nexport const deleteEntity = (entityType, id) => apiService.deleteEntity(entityType, id);\n\n// Export for testing or different configurations\nexport default ApiService;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","constructor","baseURL","normalizeEntityType","entityType","endsWith","singularFromPlural","plural","slice","request","endpoint","options","_document$querySelect","url","config","headers","csrfToken","document","querySelector","getAttribute","response","fetch","ok","Error","status","json","error","console","getEntities","getEntity","id","createEntity","data","singular","payload","log","method","body","JSON","stringify","updateEntity","deleteEntity","addRelationship","fromType","fromId","relationshipType","toType","toId","pluralFrom","pluralTo","relationship","type","target_type","target_id","removeRelationship","getSchemas","createSchema","schemaData","schema","updateSchema","schemaName","apiService","getAllEntities"],"sources":["/home/cillianomurchu/projects/store/frontend/src/services/apiService.js"],"sourcesContent":["// API configuration for future Rails backend integration\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api/v1';\n\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  // Ensure we use plural resource names for endpoints (Rails expects /products)\n  normalizeEntityType(entityType) {\n    if (!entityType) return entityType;\n    return entityType.endsWith('s') ? entityType : `${entityType}s`;\n  }\n\n  // Naive singularization for param keys (products -> product)\n  singularFromPlural(plural) {\n    if (!plural) return plural;\n    return plural.endsWith('s') ? plural.slice(0, -1) : plural;\n  }\n\n  // Generic API methods that will work with Rails REST conventions\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    // Add CSRF token for Rails (when available)\n    const csrfToken = document.querySelector('meta[name=\"csrf-token\"]')?.getAttribute('content');\n    if (csrfToken) {\n      config.headers['X-CSRF-Token'] = csrfToken;\n    }\n\n    try {\n      const response = await fetch(url, config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // CRUD operations for any entity type\n  // Rails convention: GET /api/v1/products, POST /api/v1/products, etc.\n  \n  async getEntities(entityType) {\n    const plural = this.normalizeEntityType(entityType);\n    return this.request(`/${plural}`);\n  }\n\n  async getEntity(entityType, id) {\n    const plural = this.normalizeEntityType(entityType);\n    return this.request(`/${plural}/${id}`);\n  }\n\n  async createEntity(entityType, data) {\n    const plural = this.normalizeEntityType(entityType);\n    const singular = this.singularFromPlural(plural);\n    const payload = { [singular]: data };\n\n    console.log('Creating entity:', plural, 'with payload:', payload); // Debug log\n\n    return this.request(`/${plural}`, {\n      method: 'POST',\n      body: JSON.stringify(payload),\n    });\n  }\n\n  async updateEntity(entityType, id, data) {\n    const plural = this.normalizeEntityType(entityType);\n    const singular = this.singularFromPlural(plural);\n    return this.request(`/${plural}/${id}`, {\n      method: 'PATCH',\n      body: JSON.stringify({ [singular]: data }), // Rails expects singular key\n    });\n  }\n\n  async deleteEntity(entityType, id) {\n    const plural = this.normalizeEntityType(entityType);\n    return this.request(`/${plural}/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Relationship management\n  async addRelationship(fromType, fromId, relationshipType, toType, toId) {\n    const pluralFrom = this.normalizeEntityType(fromType);\n    const pluralTo = this.normalizeEntityType(toType);\n    return this.request(`/${pluralFrom}/${fromId}/relationships`, {\n      method: 'POST',\n      body: JSON.stringify({\n        relationship: {\n          type: relationshipType,\n          target_type: pluralTo,\n          target_id: toId,\n        }\n      }),\n    });\n  }\n\n  async removeRelationship(fromType, fromId, relationshipType, toType, toId) {\n    const pluralFrom = this.normalizeEntityType(fromType);\n    const pluralTo = this.normalizeEntityType(toType);\n    return this.request(`/${pluralFrom}/${fromId}/relationships/${relationshipType}`, {\n      method: 'DELETE',\n      body: JSON.stringify({\n        target_type: pluralTo,\n        target_id: toId,\n      }),\n    });\n  }\n\n  // Schema management (for dynamic entity types)\n  async getSchemas() {\n    return this.request('/schemas');\n  }\n\n  async createSchema(schemaData) {\n    return this.request('/schemas', {\n      method: 'POST',\n      body: JSON.stringify({ schema: schemaData }),\n    });\n  }\n\n  async updateSchema(schemaName, schemaData) {\n    return this.request(`/schemas/${schemaName}`, {\n      method: 'PATCH',\n      body: JSON.stringify({ schema: schemaData }),\n    });\n  }\n}\n\n// Export singleton instance\nexport const apiService = new ApiService();\n\n// Export individual methods for convenience\nexport const createEntity = (entityType, data) => apiService.createEntity(entityType, data);\nexport const getEntity = (entityType, id) => apiService.getEntity(entityType, id);\nexport const getAllEntities = (entityType) => apiService.getAllEntities(entityType);\nexport const updateEntity = (entityType, id, data) => apiService.updateEntity(entityType, id, data);\nexport const deleteEntity = (entityType, id) => apiService.deleteEntity(entityType, id);\n\n// Export for testing or different configurations\nexport default ApiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}