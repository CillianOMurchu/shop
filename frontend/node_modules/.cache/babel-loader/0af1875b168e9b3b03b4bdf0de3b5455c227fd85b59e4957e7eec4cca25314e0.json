{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n\n// Schema definitions for different entity types\nconst initialState = {\n  schemas: {\n    // Example schema structures - these can be dynamically added\n    product: {\n      name: 'Product',\n      fields: [{\n        name: 'name',\n        type: 'string',\n        required: true,\n        label: 'Product Name'\n      }, {\n        name: 'description',\n        type: 'text',\n        required: false,\n        label: 'Description'\n      }, {\n        name: 'price',\n        type: 'number',\n        required: true,\n        label: 'Price'\n      }, {\n        name: 'image',\n        type: 'image',\n        required: false,\n        label: 'Product Image'\n      }, {\n        name: 'gallery',\n        type: 'image_gallery',\n        required: false,\n        label: 'Image Gallery'\n      }, {\n        name: 'active',\n        type: 'boolean',\n        required: false,\n        label: 'Active',\n        default: true\n      }],\n      relationships: [{\n        name: 'category',\n        type: 'belongsTo',\n        target: 'category',\n        label: 'Category'\n      }, {\n        name: 'tags',\n        type: 'hasMany',\n        target: 'tag',\n        label: 'Tags'\n      }]\n    },\n    category: {\n      name: 'Category',\n      fields: [{\n        name: 'name',\n        type: 'string',\n        required: true,\n        label: 'Category Name'\n      }, {\n        name: 'description',\n        type: 'text',\n        required: false,\n        label: 'Description'\n      }, {\n        name: 'image',\n        type: 'image',\n        required: false,\n        label: 'Category Image'\n      }, {\n        name: 'active',\n        type: 'boolean',\n        required: false,\n        label: 'Active',\n        default: true\n      }],\n      relationships: [{\n        name: 'parent',\n        type: 'belongsTo',\n        target: 'category',\n        label: 'Parent Category'\n      }, {\n        name: 'products',\n        type: 'hasMany',\n        target: 'product',\n        label: 'Products'\n      }]\n    },\n    tag: {\n      name: 'Tag',\n      fields: [{\n        name: 'name',\n        type: 'string',\n        required: true,\n        label: 'Tag Name'\n      }, {\n        name: 'color',\n        type: 'string',\n        required: false,\n        label: 'Color'\n      }],\n      relationships: [{\n        name: 'products',\n        type: 'hasMany',\n        target: 'product',\n        label: 'Products'\n      }]\n    }\n  }\n};\nconst schemasSlice = createSlice({\n  name: 'schemas',\n  initialState,\n  reducers: {\n    addSchema: (state, action) => {\n      const {\n        schemaName,\n        schema\n      } = action.payload;\n      state.schemas[schemaName] = schema;\n    },\n    updateSchema: (state, action) => {\n      const {\n        schemaName,\n        schema\n      } = action.payload;\n      if (state.schemas[schemaName]) {\n        state.schemas[schemaName] = {\n          ...state.schemas[schemaName],\n          ...schema\n        };\n      }\n    },\n    removeSchema: (state, action) => {\n      const {\n        schemaName\n      } = action.payload;\n      delete state.schemas[schemaName];\n    },\n    addFieldToSchema: (state, action) => {\n      const {\n        schemaName,\n        field\n      } = action.payload;\n      if (state.schemas[schemaName]) {\n        state.schemas[schemaName].fields.push(field);\n      }\n    },\n    removeFieldFromSchema: (state, action) => {\n      const {\n        schemaName,\n        fieldName\n      } = action.payload;\n      if (state.schemas[schemaName]) {\n        state.schemas[schemaName].fields = state.schemas[schemaName].fields.filter(field => field.name !== fieldName);\n      }\n    }\n  }\n});\nexport const {\n  addSchema,\n  updateSchema,\n  removeSchema,\n  addFieldToSchema,\n  removeFieldFromSchema\n} = schemasSlice.actions;\n\n// Selectors\nexport const selectAllSchemas = state => state.schemas.schemas;\nexport const selectSchemaByName = (state, schemaName) => state.schemas.schemas[schemaName];\nexport const selectSchemaNames = state => Object.keys(state.schemas.schemas);\nexport default schemasSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","schemas","product","name","fields","type","required","label","default","relationships","target","category","tag","schemasSlice","reducers","addSchema","state","action","schemaName","schema","payload","updateSchema","removeSchema","addFieldToSchema","field","push","removeFieldFromSchema","fieldName","filter","actions","selectAllSchemas","selectSchemaByName","selectSchemaNames","Object","keys","reducer"],"sources":["/home/cillianomurchu/projects/store/frontend/src/store/slices/schemasSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n// Schema definitions for different entity types\nconst initialState = {\n  schemas: {\n    // Example schema structures - these can be dynamically added\n    product: {\n      name: 'Product',\n      fields: [\n        { name: 'name', type: 'string', required: true, label: 'Product Name' },\n        { name: 'description', type: 'text', required: false, label: 'Description' },\n        { name: 'price', type: 'number', required: true, label: 'Price' },\n        { name: 'image', type: 'image', required: false, label: 'Product Image' },\n        { name: 'gallery', type: 'image_gallery', required: false, label: 'Image Gallery' },\n        { name: 'active', type: 'boolean', required: false, label: 'Active', default: true },\n      ],\n      relationships: [\n        { name: 'category', type: 'belongsTo', target: 'category', label: 'Category' },\n        { name: 'tags', type: 'hasMany', target: 'tag', label: 'Tags' },\n      ]\n    },\n    category: {\n      name: 'Category',\n      fields: [\n        { name: 'name', type: 'string', required: true, label: 'Category Name' },\n        { name: 'description', type: 'text', required: false, label: 'Description' },\n        { name: 'image', type: 'image', required: false, label: 'Category Image' },\n        { name: 'active', type: 'boolean', required: false, label: 'Active', default: true },\n      ],\n      relationships: [\n        { name: 'parent', type: 'belongsTo', target: 'category', label: 'Parent Category' },\n        { name: 'products', type: 'hasMany', target: 'product', label: 'Products' },\n      ]\n    },\n    tag: {\n      name: 'Tag',\n      fields: [\n        { name: 'name', type: 'string', required: true, label: 'Tag Name' },\n        { name: 'color', type: 'string', required: false, label: 'Color' },\n      ],\n      relationships: [\n        { name: 'products', type: 'hasMany', target: 'product', label: 'Products' },\n      ]\n    }\n  }\n};\n\nconst schemasSlice = createSlice({\n  name: 'schemas',\n  initialState,\n  reducers: {\n    addSchema: (state, action) => {\n      const { schemaName, schema } = action.payload;\n      state.schemas[schemaName] = schema;\n    },\n    \n    updateSchema: (state, action) => {\n      const { schemaName, schema } = action.payload;\n      if (state.schemas[schemaName]) {\n        state.schemas[schemaName] = { ...state.schemas[schemaName], ...schema };\n      }\n    },\n    \n    removeSchema: (state, action) => {\n      const { schemaName } = action.payload;\n      delete state.schemas[schemaName];\n    },\n    \n    addFieldToSchema: (state, action) => {\n      const { schemaName, field } = action.payload;\n      if (state.schemas[schemaName]) {\n        state.schemas[schemaName].fields.push(field);\n      }\n    },\n    \n    removeFieldFromSchema: (state, action) => {\n      const { schemaName, fieldName } = action.payload;\n      if (state.schemas[schemaName]) {\n        state.schemas[schemaName].fields = state.schemas[schemaName].fields.filter(\n          field => field.name !== fieldName\n        );\n      }\n    },\n  },\n});\n\nexport const {\n  addSchema,\n  updateSchema,\n  removeSchema,\n  addFieldToSchema,\n  removeFieldFromSchema,\n} = schemasSlice.actions;\n\n// Selectors\nexport const selectAllSchemas = (state) => state.schemas.schemas;\nexport const selectSchemaByName = (state, schemaName) => state.schemas.schemas[schemaName];\nexport const selectSchemaNames = (state) => Object.keys(state.schemas.schemas);\n\nexport default schemasSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}